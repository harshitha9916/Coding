/*------------------using fast and slow pointers--------------------*/
T.C = O(N)
S.C = O(1)
public class Solution {
    public boolean hasCycle(ListNode head) {
        
        ListNode fast = head;
        ListNode slow = head;
        while(fast!=null && fast.next!=null){
            fast = fast.next.next;
            slow = slow.next;
            if(slow == fast){
                return true;
            }
        }
        return false;
        
    }
}
/*------------------using Hashmap for storing references---------------------*/
T.C = O(N)
S.C = O(N)
public class Solution {
    public boolean hasCycle(ListNode head) {
        
        HashMap<ListNode,Boolean> h = new HashMap<>();
        while(head!=null){
            if(h.containsKey(head)){
                return true;
            }
            h.put(head,true);
            head = head.next;
        }
        return false;
        
    }
}
