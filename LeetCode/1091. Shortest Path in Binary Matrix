class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        
        if(grid[0][0]==1){return -1;}
        
        Queue<int[]> q = new LinkedList<>();
        q.add(new int[] {0,0,1});
        grid[0][0] = 1;
            
        int m = grid.length;
        int n = grid[0].length;
        
        int[][] dir = {{-1,-1},{1,1},{1,-1},{-1,1},{0,1},{1,0}, {0,-1},{-1,0}};
        
    while(!q.isEmpty()){
            int size = q.size();
        
            while(size-->0){
                int[] cur = q.poll();
                
                if(cur[0]==m-1 && cur[1]==n-1){return cur[2];}
                
                for(int[] d : dir){
                    int r = cur[0]+ d[0];
                    int c = cur[1]+ d[1];
                    
                    if(r>=0 && c>=0 && r<m && c<n && grid[r][c]==0){
                        q.add(new int[] {r,c,cur[2]+1});
                        grid[r][c] =1;
                    }
                }
            }
        }
    return -1;
        
    }
}
