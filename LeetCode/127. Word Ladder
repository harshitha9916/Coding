class Solution {

    public class Pair{
        String word;
        int depth;
        public Pair(String word,int depth){
            this.word = word;
            this.depth = depth;
        }
    }
    public int ladderLength(String A, String B, List<String> C) {
        Queue<Pair> q = new LinkedList<Pair>();
        HashSet<String> sets = new HashSet<String>(C);
        q.add(new Pair(A,1));
        while(!q.isEmpty()){
            Pair v = q.remove();
            ArrayList<String> neighbours = transformations(sets,v.word);
            for(String str:neighbours){
            if(B.equals(str)){return v.depth+1;}
            q.add(new Pair(str,v.depth+1));
            }
            
        }
    return 0;
    }
    public static ArrayList<String> transformations(HashSet<String> sets,String word){
        StringBuffer sb = new StringBuffer(word);
        ArrayList<String> neighbours = new ArrayList<String>();
        for(int i=0;i<sb.length();i++){
            char temp = sb.charAt(i);
            for(char ch ='a';ch<='z';ch++){
                if(ch ==temp){continue;}
                sb.setCharAt(i,ch);
                String newWord = sb.toString();
                if (sets.remove(newWord)){
                    neighbours.add(newWord);
                }
            }
            sb.setCharAt(i,temp);
        }
        return neighbours;
    }

    }
