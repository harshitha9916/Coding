class Solution {
    public int trap(int[] A) {
   
        int n =  A.length;
        if(n<=2){return 0;}
        int[] l = new int[n];
        int[] r = new int[n];
        l[0] = 0;
        r[n-1]=0;
        int leftmax=A[0], rightmax=A[n-1];
        for(int i=1;i<n;i++){
            l[i] = leftmax;
            leftmax=Math.max(leftmax,A[i]);
        }
        for(int i=n-2;i>=0;i--){
            r[i] = rightmax;
            rightmax= Math.max(rightmax,A[i]);
        }
        int tw =0;
        for(int i=0;i<n;i++){
            if(A[i]<l[i] && A[i]<r[i])
                 tw+=Math.min(l[i],r[i])-A[i];
        }
        return tw;

        
    }
}
/*

class Solution {
    public int trap(int[] A) {


        int n =  A.length;
        if(n<=2){return 0;}
        int leftmax=A[0], rightmax=A[n-1];
        int l=1,r = n-2,tw=0;
        while(l<=r){
            if(leftmax < rightmax){
                if(A[l]>=leftmax) leftmax=A[l];
                else{ tw+=leftmax-A[l];}
                l=l+1;
            }
            else{
                if(A[r]>=rightmax) rightmax=A[r];
                else{ tw+=rightmax-A[r];}
                r=r-1;
            }
        }
        return tw;
        
    }
}
*/
