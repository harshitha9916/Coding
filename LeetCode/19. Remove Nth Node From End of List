/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
 /*------------cal length and tmp variable-----------------*/
 /**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        
        ListNode tmp = head;
        ListNode d = head;
     
        int count=0;
        while(d!=null){
            d = d.next;
            count += 1;
        }
        if(n == count){
            return head.next;
        }
        int t = count-n;
        for(int i=0;i<t-1;i++){
            tmp = tmp.next;
        }
        tmp.next = tmp.next.next;
        return head;
        
    }
}

 /*----------fast and slow pointers-----------------*/
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        
        ListNode d = new ListNode();
        d.next = head;
        ListNode f = d;
        ListNode s = d;
        
        for(int i=0;i<=n;i++){
            f = f.next;
        }
        while(f!=null){
            f= f.next;
            s=s.next;
        }
        s.next = s.next.next;
        return d.next;
        
    }
}
