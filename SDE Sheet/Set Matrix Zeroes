class Solution {
    public void setZeroes(int[][] matrix) {
        
        int col0=1, rows = matrix.length,cols = matrix[0].length;
        for(int i=0;i<rows;i++){
            if(matrix[i][0]==0) col0=0;
            for(int j=1;j<cols;j++)
                 if(matrix[i][j]==0){
                     matrix[i][0] =  matrix[0][j] = 0;
                 }
        }
        for(int i=rows-1;i>=0;i--){
            for(int j=cols-1;j>=1;j--)
                 if(matrix[i][0]==0 || matrix[0][j]==0)
                     matrix[i][j] = 0;   
            if(col0==0) matrix[i][0] = 0;
        }
    }
}
/*-----------------------------Aproach-2 (Taking dummy arrays)-------------------------------*/
// T.C - O(2*N*M)
// S.C - o(N+M)
class Solution {
    public void setZeroes(int[][] matrix) {
      
        int rows = matrix.length;
        int cols = matrix[0].length;

        int[] d_r = new int[rows];
        int[] d_c = new int[cols];
        
        Arrays.fill(d_r,-1);
        Arrays.fill(d_c,-1);
        
        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                
                if(matrix[i][j]==0){
                    d_r[i] = 0;
                    d_c[j] = 0;
                }
            }
        }
        
        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                
                if(d_r[i]==0 || d_c[j] ==0){
                    matrix[i][j]=0;
                }}}
                
    }
}
/*-----------------------------Brute Force------------------------------*/
// T.C = O((N*M)*(N+M))
//  S.C = O(1)
class Solution {
    public void setZeroes(int[][] matrix) {
      
        int rows = matrix.length;
        int cols = matrix[0].length;
        int count=0;
        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                
                if(matrix[i][j]==0){
                    count++;
                    int m = i-1;
                    while(m>=0){
                        if(matrix[m][j]!=0)
                            matrix[m][j] = -1;
                        m--;
                    }
                    m = i+1;
                    while(m<rows){
                        if(matrix[m][j]!=0)
                            matrix[m][j] = -1;
                        m++;
                    }
                    int n = j-1;
                    while(n>=0){
                        if(matrix[i][n]!=0)
                            matrix[i][n] = -1;
                        n--;
                    }
                    n = j+1;
                    while(n<cols){
                        if(matrix[i][n]!=0)
                            matrix[i][n] = -1;
                        n++;
                    }
                }
                
            }
        }
        
        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                
                if(matrix[i][j]==-1 && count>0){
                    matrix[i][j]=0;
                }}}    
    }
}
