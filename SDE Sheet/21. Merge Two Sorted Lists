/*---------------------------Recursive Approach---------------------------*/
T.C = O(M+N)
S.C = O(1)+tack space
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
     
        if(l1 ==null) return l2;
        if(l2 ==null) return l1;
        
        if(l1.val<l2.val) {
            l1.next = mergeTwoLists(l1.next, l2);
            return l1;
        }
        else{ 
            l2.next = mergeTwoLists(l1, l2.next);
            return l2;
        }      
    }
}
/*---------------------------In place--------------------------------*/
T.C = O(M+N)
S.C = O(1)
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if(l1 == null) return l2;
        if(l2 == null) return l1;
        
        if(l2.val<l1.val){
            ListNode temp = l1;
            l1 = l2;
            l2 = temp;
        }
        ListNode res=l1;
        while(l1!=null && l2 !=null){
            ListNode tmp = null;
            while(l1!=null && l1.val<=l2.val){
                tmp = l1;
                l1=l1.next;
            }
            tmp.next = l2;
            //swap
            ListNode temp = l1;
            l1 = l2;
            l2 = temp;
            
        }
        return res;
        
    }
    }
/*---------------------------External place--------------------------------*/
T.C = O(M+N)
S.C = O(M+N)
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        
       ListNode temp = new ListNode();
        ListNode d = temp;
        
        while(l1!=null && l2!=null){
            if(l1.val <= l2.val) {
                ListNode t = new  ListNode(l1.val);
                temp.next  = t;
                l1 = l1.next;
            }
            else {
                ListNode t = new  ListNode(l2.val);
                temp.next  = t;
                l2 = l2.next;
            }
            
            temp = temp.next;
        }
        if(l1!=null) 
            temp.next = l1;
        else if(l2!=null) 
            temp.next = l2;
        
        return d.next;
    }
}
